---
layout: post
title:  "GitHub Pages에 포트폴리오 호스팅하기 - 2) 로컬 환경 준비"
date:   2020-01-04 21:03:36 +0530
categories: Post
---
이번 글에서는 Jekyll 테마를 커스텀하기 위해 로컬 환경을 준비하는 작업을 정리했습니다. 

로컬 환경이 준비되신 분들은 다음 장으로 넘어가주세요. :blush:

------

1) 먼저 Fork 받았던 저장소를 옮기는 작업이 필요합니다. Clone 방법은 본인의 스타일로 하면 되고, 저는 GitHub Desktop을 이용하였습니다. 

**Clone a repository from the Internet**  클릭합니다.

![](/assets/img/post2/post2_img1.png)

<br>

2) Repository 선택 후 원하는 로컬 경로 지정 후 **Clone** 클릭합니다.

![](/assets/img/post2/post2_img2.png)

<br>

3) 해당 fork에 대한 사용 계획을 묻는데 오픈 소스에 대한 기여가 목적이 아니기 때문에 두번째 선택지 **For my own purposes** 클릭합니다.

![](/assets/img/post2/post2_img3.png)

<br>

4) 이제 로컬 경로에 가보면 저장소에 있던 소스들을 내려받은 것을 확인할 수 있습니다.

![](/assets/img/post2/post2_img4.png)

<br>

5)  이제 로컬에서 Jekyll을 실행하기 위한 **Ruby**를 설치합니다. :point_right: [Ruby 설치](https://rubyinstaller.org/downloads/)

![](/assets/img/post2/post2_img10.jpg)

<br>

6) 설치가 완료되면 Ruby를 검색하여 아래 명령 프롬프트를 실행합니다.

![](/assets/img/post2/post2_img10.png)

<br>

7) 로컬내 Clone한 위치로 이동하여 아래 명령어를 입력합니다. Windows의 경우 인코딩 에러가 발생하는데 이를 해결하는 방법입니다.

:point_right: **​chcp 65001**

![](/assets/img/post2/post2_img5.png)

<br>

8) Jekyll 실행에 필요한 패키지를 설치합니다. 

명령어의 **gem**은 Ruby에서 지원하는 패키지 도구입니다. gem을 이용해 필요한 기능을 추가해서 사용이 가능합니다.

:point_right: **gem install jekyll bundler minima jekyll-feed tzinfo-data**

![](/assets/img/post2/post2_img6.png)

<br>

9) Gemfile에 정의된 gem 패키지를 재정리합니다.

:point_right: **bunlder**

![](/assets/img/post2/post2_img7.png)

<br>

10) 이제 Jekyll을 실행해보겠습니다.

:point_right: **Jekyll serve**

![](/assets/img/post2/post2_img8.png)

<br>

11) 웹 브라우저를 실행해 **http://127.0.0.1:4000/** 을 실행하면 아래와 같이 접속이 됩니다.

![](/assets/img/post2/post2_img9.png)

<br>

12) .md 파일 수정도 하기 위해 Markdown 에디터도 미리 설치하였습니다. :point_right: [Typora 설치](https://typora.io/)

![](/assets/img/post2/post2_img11.png)

<br>

:books: **참고자료**

* [Jekyll 설치](https://theorydb.github.io/envops/2019/05/03/envops-blog-github-pages-jekyll/)
* [Ruby 설치](https://park-jongseok.github.io/languages/ruby/2019/10/03/installing-ruby.html)